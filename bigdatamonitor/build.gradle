
sourceSets {
    main {
        java {
            srcDir 'src'
           
        }
       
    }
    test {
        java {
            srcDir 'test'
        }
         resources{
        	srcDir 'resources'
        }
    }
    
}
dependencies {
    api project(":bigdata-web")
    
    
     api (
         
         [group: 'com.bbossgroups', name: 'bboss-taglib', version: "${PROJ_BBOSS_VERSION}", transitive: false],
         [group: 'com.bbossgroups', name: 'bboss-htmlparser', version: "${PROJ_BBOSS_VERSION}", transitive: false],
             [group: 'com.mysql', name: 'mysql-connector-j', version: '8.2.0', transitive: false],
         
    	)
	runtimeOnly(
			[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${PROJ_BBOSS_VERSION}", transitive: true],
    )
    	
     compileOnly (            
          
            [group: 'javax.servlet', name: 'javax.servlet-api', version: "3.0.1", transitive: false],
            //[group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
            [group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.2.1', transitive: false],
           [group: 'javax.el', name: 'javax.el-api', version: '2.2.1', transitive: false],
           [group: 'org.eclipse.jetty.aggregate', name: 'jetty-all-server', version: '8.1.19.v20160209', transitive: false],
           [group: 'org.eclipse.jetty.orbit', name: 'org.apache.jasper.glassfish', version: '2.2.2.v201112011158', transitive: false],
          [group: 'org.eclipse.jetty.orbit', name: 'org.apache.taglibs.standard.glassfish', version: '1.2.0.v201112081803', transitive: false],
           [group: 'org.eclipse.jetty.orbit', name: 'com.sun.el', version: '2.2.0.v201108011116', transitive: false],
           fileTree(dir: 'lib', include: '**/*.jar'),
           
    )
     
}
tasks.register('warcopyWebRootFiles', Copy) {
    from 'WebRoot'
    into 'build/dist/WebRoot'

}
// 创建可解析的配置
configurations {
    apiResolvable {
        canBeResolved = true
        extendsFrom api
    }
    compileOnlyResolvable {
        canBeResolved = true
        extendsFrom compileOnly
    }

    runtimeOnlyResolvable {
        canBeResolved = true
        extendsFrom runtimeOnly
    }
}
tasks.register('warcopyJarFiles', Copy) {
    dependsOn 'warcopyWebRootFiles'
    from configurations.apiResolvable {

    } + configurations.runtimeOnlyResolvable {

    }
    into 'build/dist/WebRoot/WEB-INF/lib'

}

tasks.register('warcopyResourceFiles', Copy) {
    dependsOn 'warcopyJarFiles'

    from 'resources'
    into 'build/dist/WebRoot/WEB-INF/classes'

}


tasks.register('copyLibFiles', Copy) {
    //from fileTree(dir: '../lib', include: '**/*.jar')
    from configurations.runtimeClasspath
    into 'build/dist/bigdata/lib'
}
project.tasks.compileJava.dependsOn(project(':bigdata-web').tasks.publishToMavenLocal)
project.tasks.copyLibFiles.dependsOn(project(':bigdata-web').tasks.publishToMavenLocal)
tasks.register('copyResourceFiles', Copy) {
    from fileTree(dir: 'resources')
    into 'build/dist/bigdata/resources'
}

tasks.register('copyWebrootFiles', Copy) {
    from fileTree(dir: 'WebRoot')
    into 'build/dist/bigdata/WebRoot'
}
tasks.register('copyToolFiles', Copy) {

    from('runtime')
            {
                expand(bboss_version: "${PROJ_BBOSS_VERSION}", main_class: 'org.frameworkset.bigdata.impl.monitor.JettyStart')

            }
    from configurations.runtimeOnly - configurations.api
    //filteringCharset = 'UTF-8'            
    into 'build/dist/bigdata'

}

tasks.register('releaseRuntimeZip', Zip) {
    dependsOn 'copyToolFiles', 'copyWebrootFiles', 'copyResourceFiles', 'copyLibFiles'
    //appendix = 'wrapper'
    archiveBaseName = 'bigdata'
    from 'build/dist/bigdata'

}

tasks.register('releaseRuntimeWar', Zip) {
    dependsOn 'warcopyResourceFiles'
    //appendix = 'wrapper'
    // classifier = 'released'
    archiveExtension = 'war'
    archiveBaseName = 'bigdata'
    from 'build/dist/WebRoot'

}

tasks.register('releaseRuntime') {
    dependsOn 'releaseRuntimeWar', 'releaseRuntimeZip'
}
